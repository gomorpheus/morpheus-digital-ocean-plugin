# layout
resource "compute-type-layout" "kubernetes-1_30-ubuntu-22_04-digitalocean-amd64-single" {
  code = "kubernetes-1_30-ubuntu-22_04-digitalocean-amd64-single"
  enabled = true
  name = "MKS Kubernetes 1.30 Cluster on Ubuntu 22.04"
  sortOrder = 0
  computeVersion = "22.04"
  clusterVersion = "1.30.x"
  description = "provision a kubernetes 1.30 cluster on ubuntu 22.04"
  type = "digitaloceanKubeMaster"
  serverCount = 4
  memoryRequirement = 1073741824
  hasAutoScale = true
  containerRuntime = "containerd"
  networkRuntime = "calico"
  computeServers = [
    compute-type-set.kubernetes-ubuntu-22_04-digitalocean-amd64-set,
    compute-type-set.kubernetes-ubuntu-22_04-worker-digitalocean-amd64-set
  ]
  groupType = "kubernetes-cluster"
  provisionType =  "digitalocean"
  optionTypes = [
    "kubernetes.master.podCidr",
    "kubernetes.master.serviceCidr"
  ]
  specTemplates = []
  packages = [
    "kubernetes-calico-3-25-0-package",
    "kubernetes-rook-1-13-package",
    "kubernetes-fluentbit-3-0-7-package",
    "kubernetes-prometheus-0-12-package",
    "kubernetes-nginx-ingress-operator-1-10-1-package"
  ]
}



# HA layout
resource "compute-type-layout" "kubernetes-1_30-ubuntu-22_04-digitalocean-amd64" {
  code = "kubernetes-1_30-ubuntu-22_04-digitalocean-amd64"
  enabled = true
  name = "MKS Kubernetes 1.30 HA Cluster on Ubuntu 22.04"
  sortOrder = 104
  computeVersion = "22.04"
  clusterVersion = "1.30.x"
  description = "provision a high availability kubernetes 1.30 cluster on ubuntu 22.04"
  type = "digitaloceanKubeMaster"
  serverCount = 6
  memoryRequirement = 1073741824
  hasAutoScale = true
  containerRuntime = "containerd"
  networkRuntime = "calico"
  computeServers = [
    compute-type-set.kubernetes-ha-master-ubuntu-22_04-digitalocean-amd64-set,
    compute-type-set.kubernetes-ha-add-master-ubuntu-22_04-digitalocean-amd64-set,
    compute-type-set.kubernetes-ha-final-master-ubuntu-22_04-digitalocean-amd64-set,
    compute-type-set.kubernetes-ubuntu-22_04-worker-digitalocean-amd64-set
  ]
  groupType = "kubernetes-cluster"
  provisionType =  "digitalocean"
  optionTypes = [
    "kubernetes.master.podCidr",
    "kubernetes.master.serviceCidr"
  ]
  specTemplates = []
  packages = [
    "kubernetes-calico-3-25-0-package",
    "kubernetes-rook-1-13-package",
    "kubernetes-fluentbit-3-0-7-package",
    "kubernetes-prometheus-0-12-package",
    "kubernetes-nginx-ingress-operator-1-10-1-package"
  ]
}