resource "workload-type" "redis-digitalocean-3_0-ubuntu-20_04" {
  code = "redis-digitalocean-3.0-ubuntu-20.04"
  shortName = "redis"
  name = "Redis Master 3.0"
  ports = [6379]
  containerVersion = "3.0"
  repositoryImage = ""
  entryPoint = "/entrypoint.sh"
  statTypeCode = "redis"
  logTypeCode = "redis"
  checkTypeCode = "redisCheck"
  mountPoint = "/data"
  mountConfig = "/etc/redis"
  mountData = "/var/redis"
  mountLogs = "/var/log/redis"
  category = "master"
  priorityOrder = 0
  serverType = "vm"
  providerType = "digitalocean"
  virtualImage = virtual-image.digitalocean-image-morpheus-ubuntu-20_04
  scripts = [
    "redis-3.0-vm-entrypoint-prep",
    "redis-3.0-vm-entrypoint-systemd",
    "redis-3.0-vm-stop-systemd",
    "redis-3.0-vm-start-systemd"
  ]
  templates = [
    "redis-vm-3.0"
  ]
  provisionScript = "morpheus.ansible.provision.redis-3_0-1"
  provisionType = "digitalocean"
  backupType = "digitaloceanSnapshot"
  containerPorts = [
    "redis.6379"
  ]
}

resource "workload-type" "redis-digitalocean-3_0-ubuntu-20_04-slave" {
  code = "redis-digitalocean-3.0-ubuntu-20.04-slave"
  shortName = "redis"
  name = "Redis Slave 3.0"
  ports = [6379]
  containerVersion = "3.0"
  repositoryImage = ""
  entryPoint = "/entrypoint.sh"
  statTypeCode = "redis"
  logTypeCode = "redis"
  checkTypeCode = "redisCheck"
  mountPoint = "/data"
  mountConfig = "/etc/redis"
  mountData = "/var/redis"
  mountLogs = "/var/log/redis"
  category = "slave"
  slave = true
  priorityOrder = 1
  serverType = "vm"
  providerType = "digitalocean"
  virtualImage = virtual-image.digitalocean-image-morpheus-ubuntu-20_04
  scripts = [
    "redis-3.0-vm-entrypoint-prep",
    "redis-3.0-vm-entrypoint-systemd",
    "redis-3.0-vm-stop-systemd",
    "redis-3.0-vm-start-systemd"
  ]
  templates = [
    "redis-vm-3.0-slave"
  ]
  provisionScript = "morpheus.ansible.provision.redis-3_0-1"
  provisionType = "digitalocean"
  backupType = "digitaloceanSnapshot"
  containerPorts = [
    "redis.6379"
  ]
}

resource "workload-type" "redis-digitalocean-3_0-ubuntu-20_04-sentinel" {
  code = "redis-digitalocean-3.0-ubuntu-20.04-sentinel"
  shortName = "redis"
  name = "Redis Sentinel 3.0"
  ports = [26379]
  containerVersion = "3.0"
  repositoryImage = ""
  entryPoint = "/entrypoint.sh"
  statTypeCode = "redis"
  logTypeCode = "redis"
  checkTypeCode = "redisCheck"
  mountPoint = "/data"
  mountConfig = "/etc/redis"
  mountData = "/var/redis"
  mountLogs = "/var/log/redis"
  category = "sentinel"
  priorityOrder = 2
  serverType = "vm"
  providerType = "digitalocean"
  virtualImage = virtual-image.digitalocean-image-morpheus-ubuntu-20_04
  scripts = [
    "redis-3.0-vm-entrypoint-prep",
    "redis-3.0-vm-entrypoint-systemd",
    "redis-3.0-vm-stop-systemd",
    "redis-3.0-vm-start-systemd"
  ]
  templates = [
    "redis-vm-3.0-sentinel"
  ]
  provisionScript = "morpheus.ansible.provision.redis-sentinel-3_0-1"
  provisionType = "digitalocean"
  backupType = "digitaloceanSnapshot"
  containerPorts = [
    "redis.26379"
  ]
}

resource "workload-type" "redis-digitalocean-3_0-ubuntu-20_04-cluster" {
  code = "redis-digitalocean-3.0-ubuntu-20.04-cluster"
  shortName = "redis"
  name = "Redis Cluster 3.0"
  ports = [6379, 16379]
  containerVersion = "3.0"
  repositoryImage = ""
  entryPoint = "/entrypoint.sh"
  statTypeCode = "redis"
  logTypeCode = "redis"
  checkTypeCode = "redisCheck"
  mountPoint = "/data"
  mountConfig = "/etc/redis"
  mountData = "/var/redis"
  mountLogs = "/var/log/redis"
  category = "cluster"
  priorityOrder = 2
  serverType = "vm"
  providerType = "digitalocean"
  virtualImage = virtual-image.digitalocean-image-morpheus-ubuntu-20_04
  scripts = [
    "redis-3.0-vm-entrypoint-prep",
    "redis-3.0-vm-entrypoint-systemd",
    "redis-3.0-vm-stop-systemd",
    "redis-3.0-vm-start-systemd",
    "redis-3.0-create-cluster"
  ]
  templates = [
    "redis-vm-3.0-cluster"
  ]
  provisionScript = "morpheus.ansible.provision.redis-3_0-1"
  provisionType = "digitalocean"
  backupType = "digitaloceanSnapshot"
  containerPorts = [
    "redis.6379",
    "redis.16379"
  ]
}

resource "workload-type-set" "redis-digitalocean-3_0-ubuntu-20_04-set" {
  code = "redis-digitalocean-3.0-ubuntu-20.04-set"
  category = "redis"
  workloadType = workload-type.redis-digitalocean-3_0-ubuntu-20_04
  priorityOrder = 0
  containerCount = 1
}

resource "workload-type-set" "redis-digitalocean-3_0-ubuntu-20_04-slave-set" {
  code = "redis-digitalocean-3.0-ubuntu-20.04-slave-set"
  category = "redis"
  workloadType = workload-type.redis-digitalocean-3_0-ubuntu-20_04-slave
  priorityOrder = 1
  containerCount = 1
}

resource "workload-type-set" "redis-digitalocean-3_0-ubuntu-20_04-sentinel-set" {
  code = "redis-digitalocean-3.0-ubuntu-20.04-sentinel-set"
  category = "redis"
  workloadType = workload-type.redis-digitalocean-3_0-ubuntu-20_04-sentinel
  priorityOrder = 2
  containerCount = 3
}

resource "workload-type-set" "redis-digitalocean-3_0-ubuntu-20_04-cluster-set" {
  code = "redis-digitalocean-3.0-ubuntu-20.04-cluster-set"
  category = "redis"
  workloadType = workload-type.redis-digitalocean-3_0-ubuntu-20_04-cluster
  priorityOrder = 0
  containerCount = 6
}

resource "instance-type-layout" "redis-digitalocean-3_0-ubuntu-20_04-single" {
  code = "redis-digitalocean-3.0-ubuntu-20.04-single"
  name = "DigitalOcean Master"
  sortOrder = 10
  description = "This will provision a single process with no redundancy"
  instanceType = "redis"
  instanceVersion = "3.0"
  serverCount = 1
  portCount = 1
  serverType = "vm"
  hasAutoScale = false
  enabled = true
  workloads = [
    workload-type-set.redis-digitalocean-3_0-ubuntu-20_04-set
  ]
  provisionType = "digitalocean"
}

resource "instance-type-layout" "redis-digitalocean-3_0-ubuntu-20_04-master-slave" {
  code = "redis-digitalocean-3.0-ubuntu-20.04-master-slave"
  name = "DigitalOcean Master/Slave"
  sortOrder = 11
  description = "This will provision a single process with no redundancy"
  instanceType = "redis"
  instanceVersion = "3.0"
  serverCount = 2
  portCount = 1
  serverType = "vm"
  hasAutoScale = false
  enabled = true
  workloads = [
    workload-type-set.redis-digitalocean-3_0-ubuntu-20_04-set,
    workload-type-set.redis-digitalocean-3_0-ubuntu-20_04-slave-set
  ]
  provisionType = "digitalocean"
}

resource "instance-type-layout" "redis-digitalocean-3_0-ubuntu-20_04-ha" {
  code = "redis-digitalocean-3.0-ubuntu-20.04-ha"
  name = "DigitalOcean HA Master/Slave/Sentinels"
  sortOrder = 12
  description = "This will provision a master, slave and 3 sentinels"
  instanceType = "redis"
  instanceVersion = "3.0"
  serverCount = 5
  portCount = 1
  serverType = "vm"
  hasAutoScale = false
  enabled = true
  workloads = [
    workload-type-set.redis-digitalocean-3_0-ubuntu-20_04-set,
    workload-type-set.redis-digitalocean-3_0-ubuntu-20_04-slave-set,
    workload-type-set.redis-digitalocean-3_0-ubuntu-20_04-sentinel-set
  ]
  provisionType = "digitalocean"
}

resource "instance-type-layout" "redis-digitalocean-3_0-ubuntu-20_04-cluster" {
  code = "redis-digitalocean-3.0-ubuntu-20.04-cluster"
  name = "DigitalOcean Cluster"
  sortOrder = 13
  description = "This will provision a 6 node redis cluster"
  instanceType = "redis"
  instanceVersion = "3.0"
  serverCount = 6
  portCount = 2
  serverType = "vm"
  hasAutoScale = false
  enabled = true
  workloads = [
    workload-type-set.redis-digitalocean-3_0-ubuntu-20_04-cluster-set
  ]
  provisionType = "digitalocean"
}